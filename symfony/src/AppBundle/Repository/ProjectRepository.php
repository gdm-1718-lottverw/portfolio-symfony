<?php

namespace AppBundle\Repository;

/**
 * ProjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectRepository extends \Doctrine\ORM\EntityRepository
{
    public function findProjects($username){
        $q = $this->createQueryBuilder('project')
            ->leftJoin('project.users', 'users')
            ->select('project.id, project.title, project.hash, project.description, project.customer, project.deadline')
            ->where('project.finished = false')
            ->AndWhere('users.username = :username')->setParameter('username', $username)
            ->getQuery()
            ->getArrayResult();
        return $q;
    }

    public function findProjectByHash($project_hash){
        $q = $this->createQueryBuilder('project')
            ->select('project')
            ->andWhere('project.hash = :hash')->setParameter('hash', $project_hash)
            ->getQuery()
            ->getOneOrNullResult();
        return $q;
    }

    public function findOngoingProjectByHash($project_hash){
        $q = $this->createQueryBuilder('project')
            ->select('project')
            ->where('project.finished = false')
            ->andWhere('project.hash = :hash')->setParameter('hash', $project_hash)
            ->getQuery()
            ->getArrayResult();
        return $q[0];
    }
    /*******
     * QUERY FOR STATS
     *******/
    public function findProjectGreen($today){
        $q = $this->createQueryBuilder('project')
            ->select('project.title As title')
            ->where('project.finished = true')
            ->where('project.deadline > :today')->setParameter('today', $today)
            ->andWhere('project.deadline > project.finishedAt')
            ->groupBy('project.id')
            ->getQuery()
            ->getArrayResult();
        return $q;
    }
    public function findProjectRed($today){
        $q = $this->createQueryBuilder('project')
            ->select('project.title As title')
            ->where('project.deadline < :today')->setParameter('today', $today)
            ->orWhere('project.deadline < project.finishedAt')
            ->groupBy('project.id')
            ->getQuery()
            ->getArrayResult();
        return $q;
    }
    public function findProjectOrange($today){
        $q = $this->createQueryBuilder('project')
            ->select('project.title')
            ->where('project.finished = false')
            ->andWhere('project.deadline > :today')->setParameter('today', $today)
            ->getQuery()
            ->getArrayResult();
        return $q;
    }

    public function  getAdminProjects(){
        $q = $this->createQueryBuilder('project')
            ->leftJoin('project.issues', 'i')
            ->leftJoin('project.checklist', 'c')
            ->leftJoin('c.items', 'item')
            ->leftJoin('project.tasks', 't')
            ->leftJoin('project.group', 'g')
            ->leftJoin('project.feedback', 'f')
            ->select('project, i, g, t, f, c, item')
            ->where('project.finished = false')
            ->getQuery()
            ->getArrayResult();
        return $q;
    }


}


